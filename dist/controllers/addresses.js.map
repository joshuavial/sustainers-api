{"version":3,"sources":["controllers/addresses.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,aAAa,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAA;AACnD,IAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;;IAEpC,mBAAmB;AACZ,WADP,mBAAmB,CACX,GAAG,EAAE;0BADb,mBAAmB;;AAErB,QAAI,CAAC,GAAG,GAAG,GAAG,CAAA;GACf;;eAHG,mBAAmB;;WAajB,gBAAC,GAAG,EAAE,GAAG,EAAE;;;AACf,UAAI,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;AAClC,UAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;AAAE,eAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;OAAE;AACzD,UAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AAAE,eAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;OAAE;;AAE5D,0BAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,UAAC,YAAY,EAAK;AACxE,YAAG,YAAY,EAAE;AAAE,iBAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SAAE;AAChD,cAAK,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,IAAI,EAAE,CAAA;AAChD,WAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;OACpB,CAAC,CAAA;KACH;;;WAlBsB,0BAAC,KAAK,EAAE,GAAG,EAAE;AAClC,UAAI,UAAU,GAAG,IAAI,mBAAmB,CAAC,GAAG,CAAC,CAAA;;AAE7C,SAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACpC,kBAAU,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;OAC5B,CAAC,CAAA;KACH;;;SAXG,mBAAmB;;;AA0BzB,SAAS,WAAW,CAAC,IAAI,EAAE;AACzB,SAAO;AACL,WAAO,EAAE,IAAI,CAAC,OAAO;AACrB,SAAK,EAAE,IAAI,CAAC,KAAK;AACjB,aAAS,EAAE,IAAI,CAAC,SAAS;GAC1B,CAAC;CACH;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE;AAC3B,SAAO,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC;CAC3D;;AAED,SAAS,cAAc,CAAC,MAAM,EAAE;AAC9B,SAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;CAClF;;AAED,SAAS,oBAAoB,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE;AACnD,SAAO,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAC,EAAC,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC3D,QAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAA;GAClB,CAAC,CAAA;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,mBAAmB,CAAA","file":"controllers/addresses.js","sourcesContent":["const AddressSchema = require('../schemas/address')\nconst Message = require('bitcore-message')\n\nclass AddressesController {\n  constructor(app) {\n    this.app = app\n  }\n\n  static registerHandlers(route, app) {\n    let controller = new AddressesController(app)\n\n    app.express.post(route, (req, res) => {\n      controller.create(req, res)\n    })\n  }\n\n  create(req, res) {\n    let params = parseParams(req.body)\n    if (!paramsValid(params)) { return(res.sendStatus(400)) }\n    if (!signatureValid(params)) { return(res.sendStatus(401)) }\n    \n    checkForGreaterNonce(this.app.model('address'), params, (nonceInvalid) => {\n      if(nonceInvalid) { return(res.sendStatus(401)) }\n      this.app.modelInstance('address', params).save()\n      res.sendStatus(200)\n    })\n  }\n}\n\nfunction parseParams(body) {\n  return({\n    address: body.address,\n    nonce: body.nonce,\n    signature: body.signature\n  })\n}\n\nfunction paramsValid(params) {\n  return(params.address && params.nonce && params.signature)\n}\n\nfunction signatureValid(params) {\n  return(Message(params.nonce.toString()).verify(params.address, params.signature))\n}\n\nfunction checkForGreaterNonce(Address, params, done) {\n  Address.findOne({nonce: {$gte: params.nonce}}, (err, res) => {\n    done(res != null)\n  })\n}\n\nmodule.exports = AddressesController\n"],"sourceRoot":"/source/"}